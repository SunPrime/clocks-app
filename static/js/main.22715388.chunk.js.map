{"version":3,"sources":["layout/header/header.js","component/button/button.js","component/input/input.js","layout/main/main.js","layout/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Button","children","onClick","disabled","active","invert","attrs","classes","classNames","Tag","href","e","preventDefault","defaultProps","Input","id","label","error","htmlFor","required","name","Main","props","state","timeLondon","timeKyiv","timeKathmandu","input","flagSetInterval","fladSetIntervalCustom","currentDate","localStorage","getItem","this","currentCustomTime","Date","currentTime","setInterval","setState","toLocaleString","timeZone","date","getTime","event","console","log","target","value","currentValue","year","getFullYear","month","getMonth","day","getDay","timeHours","split","timeMin","newTime","clearTimeout","clearInterval","setItem","removeItem","handleClick","bind","renderNumbers","type","onChange","handleInput","Component","Footer","App","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22715388.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        Hello world\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport './button.css';\r\n\r\nconst Button = ({\r\n                    children, onClick, className, disabled, active, invert, ...attrs\r\n                }) => {\r\n    const onClickAction = e => {\r\n        if (disabled) {\r\n            e.preventDefault();\r\n        } else {\r\n            return onClick(e);\r\n        }\r\n    };\r\n\r\n    const classes = classNames(\r\n        'btn',\r\n        className,\r\n        { active },\r\n        { invert },\r\n    );\r\n\r\n    const Tag = attrs.href ? 'a' : 'button';\r\n\r\n    return (\r\n        <Tag\r\n            className={classes}\r\n            disabled={disabled}\r\n            onClick={onClickAction}\r\n            {...attrs}\r\n        >\r\n            {children}\r\n        </Tag>\r\n    );\r\n};\r\n\r\nButton.propTypes = {\r\n    children: PropTypes.node,\r\n    onClick: PropTypes.func,\r\n    className: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    active: PropTypes.bool,\r\n};\r\n\r\nButton.defaultProps = {\r\n    children: 'Default button',\r\n    onClick: () => {},\r\n    className: '',\r\n    disabled: false,\r\n    active: false,\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport './input.css';\r\n\r\nconst Input = ({\r\n                   id, className, label, error, ...attrs\r\n               }) => {\r\n    const classes = classNames(\r\n        'input',\r\n        className,\r\n        { error },\r\n    );\r\n\r\n    return (\r\n        <div className=\"inputWrapper\">\r\n            <div className=\"labelsWrapper\">\r\n                {label\r\n                && <label className=\"inputLabel\" htmlFor={id}>{label}</label>\r\n                }\r\n                {attrs.required\r\n                && <span className=\"inputRequired\">Required</span>\r\n                }\r\n            </div>\r\n            <input\r\n                name={id}\r\n                id={id}\r\n                className={classes}\r\n                {...attrs}\r\n            />\r\n            {error\r\n            && <span className=\"inputError\">{error}</span>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nInput.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    className: PropTypes.string,\r\n    label: PropTypes.string,\r\n    error: PropTypes.string,\r\n};\r\n\r\nInput.defaultProps = {\r\n    className: '',\r\n    label: '',\r\n    error: '',\r\n};\r\n\r\nexport default Input;","import React, { Component } from \"react\"\r\nimport Clock from \"react-clock\"\r\nimport Button from \"../../component/button/button\"\r\nimport Input from \"../../component/input/input\"\r\n\r\nimport \"./main.css\"\r\n\r\nclass Main extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            timeLondon:    \"\",\r\n            timeKyiv:      \"\",\r\n            timeKathmandu: \"\",\r\n            input:         \"\"\r\n        };\r\n\r\n        this.flagSetInterval = null;\r\n        this.fladSetIntervalCustom = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currentDate = localStorage.getItem(\"app-clocks\");\r\n        if (currentDate !== null){\r\n            this.currentCustomTime(new Date(currentDate))\r\n        } else {\r\n            this.currentTime()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.flagSetInterval = null;\r\n        this.fladSetIntervalCustom = null;\r\n    }\r\n\r\n    currentTime() {\r\n        this.flagSetInterval = setInterval(\r\n            () =>\r\n                this.setState({\r\n                    timeLondon: new Date(new Date().toLocaleString(\"en-US\", {timeZone: \"Europe/London\"})),\r\n                    timeKyiv: new Date(),\r\n                    timeKathmandu: new Date(new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Kathmandu\"})),\r\n                }),\r\n            1000\r\n        )\r\n    }\r\n\r\n    currentCustomTime(date) {\r\n        let currentDate = date;\r\n        this.fladSetIntervalCustom = setInterval(\r\n            () => {\r\n                this.setState({\r\n                    timeLondon: new Date(currentDate.toLocaleString(\"en-US\", {timeZone: \"Europe/London\"})),\r\n                    timeKyiv: currentDate,\r\n                    timeKathmandu: new Date(currentDate.toLocaleString(\"en-US\", {timeZone: \"Asia/Kathmandu\"})),\r\n                });\r\n                currentDate =  new Date(currentDate.getTime() + 1000);\r\n            },\r\n            1000\r\n        )\r\n    }\r\n\r\n    handleInput(event){\r\n        console.log(\"INPUT\", event.target.value);\r\n        let currentValue = event.target.value;\r\n        if (currentValue !== \"\"){\r\n            let date = new Date();\r\n            let year = date.getFullYear();\r\n            let month = date.getMonth();\r\n            let day = date.getDay();\r\n            let timeHours = currentValue.split(\":\")[0];\r\n            let timeMin = currentValue.split(\":\")[1];\r\n            let newTime =  new Date(year, month, day, timeHours, timeMin);\r\n            clearTimeout(this.flagSetInterval);\r\n            clearInterval(this.fladSetIntervalCustom);\r\n            this.currentCustomTime(newTime);\r\n            localStorage.setItem(\"app-clocks\", newTime);\r\n        }\r\n        this.setState({\r\n            input: currentValue\r\n        });\r\n    }\r\n\r\n    handleClick(event){\r\n        clearInterval(this.fladSetIntervalCustom);\r\n        this.currentTime();\r\n        this.setState({\r\n            input: \"\"\r\n        });\r\n        localStorage.removeItem(\"app-clocks\")\r\n    }\r\n\r\n    render() {\r\n        const { timeLondon, timeKyiv, timeKathmandu, input } = this.state;\r\n\r\n        return (\r\n            <div className=\"main\">\r\n                <Button onClick={this.handleClick.bind(this)}>\r\n                    Current time</Button>\r\n                <div className=\"wrapper-clocks\">\r\n                    <div className=\"clock\">\r\n                        <h4>London</h4>\r\n                        <Clock\r\n                            renderNumbers={true}\r\n                            value={timeLondon}\r\n                        />\r\n                    </div>\r\n                    <div className=\"clock\">\r\n                        <h4>Kyiv</h4>\r\n                        <Clock\r\n                            renderNumbers={true}\r\n                            value={timeKyiv}\r\n                        />\r\n                        <Input\r\n                            id=\"time\"\r\n                            type=\"time\"\r\n                            value={input}\r\n                            onChange={this.handleInput.bind(this)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"clock\">\r\n                        <h4>Kathmandu</h4>\r\n                        <Clock\r\n                            renderNumbers={true}\r\n                            value={timeKathmandu}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = () => (\r\n    <div className=\"footer\">\r\n        &copy; Company {new Date().getFullYear()}\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\n\nimport Header from \"./layout/header/header\"\nimport Main from \"./layout/main/main\"\nimport Footer from \"./layout/footer/footer\"\n\nconst App = ({ children }) => [\n    <Header key=\"header\"/>,\n    <Main key=\"main\">\n        {children}\n    </Main>,\n    <Footer key=\"footer\"/>\n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}